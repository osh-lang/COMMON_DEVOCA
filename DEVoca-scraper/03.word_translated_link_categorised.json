[
  {
    "word_name_kr": "추상 데이터 유형 (ADT)",
    "word_name_en": "abstract data type (ADT)",
    "word_def": "추상 데이터 유형(ADT)은 데이터와 그 데이터에 대해 수행할 수 있는 연산들을 추상화하여 정의한 것입니다. ADT는 데이터의 표현 방식을 숨기고, 사용자에게는 연산의 인터페이스만을 제공합니다. 이를 통해 데이터 구조의 구현 세부 사항에 대한 관심을 분리하여, 프로그램의 모듈성과 재사용성을 증가시킵니다. 예를 들어, 스택, 큐, 리스트, 트리 등은 모두 ADT의 예입니다. 각각은 자신만의 연산을 제공하며, 이러한 연산을 통해 데이터를 관리합니다. ADT의 사용은 소프트웨어 개발에서 중요한 개념으로, 추상화 수준을 높여 복잡한 시스템을 더 쉽게 이해하고 구현할 수 있게 합니다.",
    "word_summ": "추상 데이터 유형(ADT)은 데이터와 그 연산을 추상화해 정의, 구현 세부를 숨기며 프로그램 모듈성, 재사용성을 향상시킵니다. 스택, 큐 등을 예로, 소프트웨어 추상화와 복잡성 관리에 중요합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Abstract_data_type",
    "wordCategory": [
      "DataStructure"
    ]
  },
  {
    "word_name_kr": "추상 메서드",
    "word_name_en": "abstract method",
    "word_def": "추상 메서드는 객체 지향 프로그래밍에서 클래스의 특정 메서드의 구현을 강제하기 위해 사용되는 메서드입니다. 이러한 메서드는 일반적으로 추상 클래스 내에 정의되며, 구체적인 구현은 해당 추상 클래스를 상속받는 서브클래스에서 이루어집니다. 추상 메서드는 메서드의 시그니처만을 선언하고, 본문은 포함하지 않습니다. 이 접근 방식을 통해 개발자는 다형성을 활용할 수 있고, 서브클래스가 부모 클래스의 계약을 따르도록 강제할 수 있습니다. 이는 소프트웨어의 확장성과 유지보수성을 향상시키는 데 유용하며, 복잡한 시스템에서 일관된 인터페이스의 구현을 보장합니다.",
    "word_summ": "추상 메서드는 추상 클래스에서 정의되어 서브클래스 구현을 강제, 다형성 및 계약 준수 강화, 소프트웨어 확장성 및 유지보수성 향상에 기여합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Abstract_method",
    "wordCategory": [
      "OOP"
    ]
  },
  {
    "word_name_kr": "집계 함수",
    "word_name_en": "aggregate function",
    "word_def": "데이터베이스 관리에서 여러 행의 값을 그룹화하여 합계, 카운트 또는 최대값과 같이 더 중요한 의미 또는 측정값을 하나의 값으로 만드는 기능입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Aggregate_function",
    "wordCategory": [
      "DataAnalysis"
    ]
  },
  {
    "word_name_kr": "애자일 소프트웨어 개발",
    "word_name_en": "agile software development",
    "word_def": "자체 조직 및 교차 기능 팀과 고객/최종 사용자의 협업을 통해 요구사항과 솔루션이 진화하는 소프트웨어 개발 접근 방식입니다. 적응형 계획, 진화적 개발, 조기 제공 및 지속적인 개선을 옹호하며 변화에 신속하고 유연하게 대응하도록 장려합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Agile_software_development",
    "wordCategory": [
      "SoftwareDevelopment"
    ]
  },
  {
    "word_name_kr": "알고리즘",
    "word_name_en": "algorithm",
    "word_def": "일련의 문제를 해결하는 방법에 대한 명확한 사양. 알고리즘은 계산, 데이터 처리 및 자동화된 추론 작업을 수행할 수 있습니다. 알고리즘은 컴퓨팅 기술에서 어디에나 존재합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Algorithm",
    "wordCategory": [
      "Algorithm"
    ]
  },
  {
    "word_name_kr": "애플리케이션 프로그래밍 인터페이스 (API)",
    "word_name_en": "application programming interface (API)",
    "word_def": "소프트웨어 구축을 위한 서브루틴 정의, 통신 프로토콜 및 도구의 집합입니다. 일반적으로 다양한 구성 요소 간에 명확하게 정의된 통신 방법의 집합입니다. 좋은 API는 모든 구성 요소를 제공하여 프로그래머가 이를 조합하여 컴퓨터 프로그램을 더 쉽게 개발할 수 있게 해줍니다.",
    "word_link": "https://en.wikipedia.org/wiki/Application_programming_interface",
    "wordCategory": [
      "Backend"
    ]
  },
  {
    "word_name_kr": "오토마타 이론",
    "word_name_en": "automata theory",
    "word_def": "추상적인 기계와 오토마타, 그리고 이를 이용해 해결할 수 있는 계산 문제를 연구하는 학문. 이론적 컴퓨터 과학과 이산 수학(수학과 컴퓨터 과학 모두의 연구 분야)의 한 이론입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Automata_theory",
    "wordCategory": [
      "Automata"
    ]
  },
  {
    "word_name_kr": "대역폭",
    "word_name_en": "bandwidth",
    "word_def": "주어진 경로를 통한 데이터 전송의 최대 속도. 대역폭은 네트워크 대역폭, 데이터 대역폭 또는 디지털 대역폭으로 특징지어질 수 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Bandwidth_(computing)",
    "wordCategory": [
      "Network"
    ]
  },
  {
    "word_name_kr": "벤치마크",
    "word_name_en": "benchmark",
    "word_def": "컴퓨터 프로그램, 프로그램 집합 또는 기타 작업을 실행하는 행위로, 일반적으로 대상에 대해 여러 가지 표준 테스트와 시험을 실행하여 상대적인 성능을 평가합니다. 벤치마크라는 용어는 정교하게 설계된 벤치마킹 프로그램 자체의 목적으로도 흔히 사용됩니다.",
    "word_link": "https://en.wikipedia.org/wiki/Benchmark_(computing)",
    "wordCategory": [
      "Testing"
    ]
  },
  {
    "word_name_kr": "빅 데이터",
    "word_name_en": "big data",
    "word_def": "기존의 데이터 처리 애플리케이션 소프트웨어가 적절히 처리하기에는 너무 크거나 복잡한 데이터 집합을 가리키는 용어입니다. 사례(행)가 많은 데이터는 더 큰 통계적 파워를 제공하는 반면, 복잡성(속성 또는 열이 많은 데이터)이 높은 데이터는 오탐지율이 높아질 수 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Big_data",
    "wordCategory": [
      "BigData"
    ]
  },
  {
    "word_name_kr": "빅 O 표기법",
    "word_name_en": "big O notation",
    "word_def": "인수가 특정 값이나 무한대를 향할 때 함수의 극한 동작을 설명하는 수학적 표기법. 폴 바흐만, 에드먼드 랜도 등이 발명한 표기법 계열의 하나로, 바흐만-랜도 표기법 또는 점근 표기법이라고 통칭합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Big_O_notation",
    "wordCategory": [
      "Algorithm"
    ]
  },
  {
    "word_name_kr": "이진수",
    "word_name_en": "binary number",
    "word_def": "수학 및 디지털 전자공학에서 일반적으로 0(0)과 1(1)이라는 두 개의 기호만 사용하는 2진수 체계 또는 2진수 체계로 표현되는 숫자입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Binary_number",
    "wordCategory": [
      "DataType"
    ]
  },
  {
    "word_name_kr": "바이너리 트리",
    "word_name_en": "binary tree",
    "word_def": "각 노드가 최대 두 개의 자식을 갖는 트리 데이터 구조로, 왼쪽 자식과 오른쪽 자식이라고 합니다. 집합 이론 개념만을 사용한 재귀적 정의는 (비어 있지 않은) 이진 트리는 튜플(L, S, R)이며, 여기서 L과 R은 이진 트리 또는 빈 집합이고 S는 싱글톤 집합이라는 것입니다. 일부 저자는 이진 트리를 빈 집합으로도 허용하기도 합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Binary_tree",
    "wordCategory": [
      "DataStructure"
    ]
  },
  {
    "word_name_kr": "비트",
    "word_name_en": "bit",
    "word_def": "컴퓨팅 및 디지털 통신에 사용되는 기본 정보 단위로, 2진수의 합성어입니다. 이진 숫자는 두 가지 가능한 값 중 하나를 가질 수 있으며, 물리적으로 두 가지 상태의 장치로 표현할 수 있습니다. 이러한 상태 값은 가장 일반적으로 0 또는 1로 표시됩니다.",
    "word_link": "https://en.wikipedia.org/wiki/Bit",
    "wordCategory": [
      "DataType"
    ]
  },
  {
    "word_name_kr": "부울 표현식",
    "word_name_en": "Boolean expression",
    "word_def": "프로그래밍 언어에서 사용되는 표현식으로, 평가 시 참 또는 거짓 중 하나의 부울 값을 반환합니다. 부울 표현식은 부울 상수 참 또는 거짓, 부울 타입 변수, 부울 값 연산자, 부울 값 함수의 조합으로 구성될 수 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Boolean_expression",
    "wordCategory": [
      "DataType"
    ]
  },
  {
    "word_name_kr": "바이트",
    "word_name_en": "byte",
    "word_def": "가장 일반적으로 2진수를 나타내는 8비트로 구성되는 디지털 정보 단위. 역사적으로 바이트는 컴퓨터에서 텍스트 한 문자를 인코딩하는 데 사용되는 비트의 수였으며, 이러한 이유로 많은 컴퓨터 아키텍처에서 주소 지정이 가능한 가장 작은 메모리 단위입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Byte",
    "wordCategory": [
      "DataType"
    ]
  },
  {
    "word_name_kr": "부팅",
    "word_name_en": "booting",
    "word_def": "컴퓨터 또는 컴퓨터 기기를 사용할 수 있을 때까지 시동하는 절차. 버튼을 누르는 등의 하드웨어 또는 소프트웨어 명령으로 시작할 수 있습니다. 전원이 켜진 후 컴퓨터는 상대적으로 멍청한 상태가 되어 읽기 전용 메모리라고 하는 저장소의 일부만 읽을 수 있습니다. 여기에는 펌웨어라는 작은 프로그램이 저장됩니다. 펌웨어는 전원을 켜면 자체 테스트를 수행하며, 가장 중요한 것은 하드 디스크 및 주 메모리와 같은 다른 유형의 메모리에 액세스할 수 있다는 점입니다. 펌웨어는 더 큰 프로그램을 컴퓨터의 주 메모리에 로드하여 실행합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Booting",
    "wordCategory": [
      "Hardware"
    ]
  },
  {
    "word_name_kr": "클래스",
    "word_name_en": "class",
    "word_def": "객체 지향 프로그래밍에서 객체를 생성하기 위한 확장 가능한 프로그램 코드 템플릿으로, 상태(멤버 변수)의 초기 값과 동작(멤버 함수 또는 메서드)의 구현을 제공합니다. 많은 언어에서 클래스 이름은 클래스의 이름(템플릿 자체), 클래스의 기본 생성자(객체를 생성하는 서브루틴)의 이름, 클래스를 인스턴스화하여 생성되는 객체의 유형으로 사용되며, 이러한 별개의 개념은 쉽게 혼동됩니다.",
    "word_summ": "클래스는 객체 지향 프로그래밍에서 객체를 생성하는데 사용되는 코드 템플릿으로, 초기 상태와 동작을 정의합니다. 클래스 이름은 클래스 자체, 기본 생성자, 인스턴스화된 객체의 유형을 나타냅니다.",
    "word_link": "https://en.wikipedia.org/wiki/Class_(computer_science)",
    "wordCategory": [
      "OOP"
    ]
  },
  {
    "word_name_kr": "클라이언트",
    "word_name_en": "client",
    "word_def": "서버에서 제공하는 서비스에 액세스하는 컴퓨터 하드웨어 또는 소프트웨어입니다. 서버는 종종 (항상 그런 것은 아니지만) 다른 컴퓨터 시스템에 있으며, 이 경우 클라이언트는 네트워크를 통해 서비스에 액세스합니다. 이 용어는 클라이언트-서버 모델에서 프로그램이나 장치가 수행하는 역할에 적용됩니다.",
    "word_link": "https://en.wikipedia.org/wiki/Client_(computing)",
    "wordCategory": [
      "Network"
    ]
  },
  {
    "word_name_kr": "클라우드 컴퓨팅",
    "word_name_en": "cloud computing",
    "word_def": "인터넷을 통해 최소한의 관리 노력으로 신속하게 프로비저닝할 수 있는 구성 가능한 컴퓨터 시스템 리소스 및 상위 수준의 서비스 공유 풀입니다. 클라우드 컴퓨팅은 공공 유틸리티와 유사하게 일관성과 규모의 경제를 달성하기 위해 리소스 공유에 의존합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Cloud_computing",
    "wordCategory": [
      "Infrastructure"
    ]
  },
  {
    "word_name_kr": "코딩",
    "word_name_en": "coding",
    "word_def": "컴퓨터 프로그래밍은 특정 컴퓨팅 작업을 수행하기 위해 실행 가능한 컴퓨터 프로그램을 설계하고 구축하는 과정입니다. 프로그래밍에는 분석, 알고리즘 생성, 알고리즘의 정확성 및 리소스 소비량 프로파일링, 선택한 프로그래밍 언어(일반적으로 코딩이라고 함)로 알고리즘 구현과 같은 작업이 포함됩니다. 프로그램의 소스 코드는 하나 이상의 프로그래밍 언어로 작성됩니다. 프로그래밍의 목적은 주어진 문제를 해결하기 위한 작업의 수행을 자동화하는 일련의 명령어를 찾는 것입니다. 따라서 프로그래밍 과정에는 애플리케이션 도메인에 대한 지식, 전문 알고리즘, 형식적 논리 등 여러 가지 주제에 대한 전문 지식이 필요한 경우가 많습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Computer_programming",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "컴파일러",
    "word_name_en": "compiler",
    "word_def": "한 프로그래밍 언어(소스 언어)로 작성된 컴퓨터 코드를 다른 프로그래밍 언어(대상 언어)로 변환하는 컴퓨터 프로그램. 컴파일러는 주로 컴퓨터와 같은 디지털 장치를 지원하는 일종의 번역기입니다. 컴파일러라는 이름은 주로 상위 수준의 프로그래밍 언어에서 하위 수준의 언어(예: 어셈블리 언어, 객체 코드 또는 기계어 코드)로 소스 코드를 번역하여 실행 가능한 프로그램을 생성하는 프로그램에 사용됩니다.",
    "word_link": "https://en.wikipedia.org/wiki/Compiler",
    "wordCategory": [
      "SoftwareDevelopment"
    ]
  },
  {
    "word_name_kr": "컴퓨터 아키텍처",
    "word_name_en": "computer architecture",
    "word_def": "컴퓨터 시스템의 기능, 조직 및 구현을 설명하는 일련의 규칙과 방법. 아키텍처에 대한 일부 정의는 특정 구현이 아닌 컴퓨터의 기능과 프로그래밍 모델을 설명하는 것으로 정의합니다. 다른 정의에서 컴퓨터 아키텍처는 명령어 집합 아키텍처 설계, 마이크로 아키텍처 설계, 로직 설계 및 구현을 포함합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Computer_architecture",
    "wordCategory": [
      "Architecture"
    ]
  },
  {
    "word_name_kr": "컴퓨터 그래픽",
    "word_name_en": "computer graphics",
    "word_def": "컴퓨터를 사용하여 만든 사진 및 영화. 일반적으로 이 용어는 특수 그래픽 하드웨어 및 소프트웨어의 도움으로 생성된 컴퓨터 생성 이미지 데이터를 의미합니다. 컴퓨터 과학의 방대하고 최근에 개발된 분야입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Computer_graphics",
    "wordCategory": [
      "ComputerGraphics"
    ]
  },
  {
    "word_name_kr": "컴퓨터 과학",
    "word_name_en": "computer science",
    "word_def": "컴퓨터의 설계와 사용의 기초가 되는 이론, 실험, 공학을 연구하는 학문입니다. 디지털 정보를 처리, 저장, 전달하는 알고리즘을 연구하는 학문입니다. 컴퓨터 과학자는 계산 이론과 계산 시스템 설계를 전문으로 합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Computer_science",
    "wordCategory": [
      "ComputerScience"
    ]
  },
  {
    "word_name_kr": "컴퓨터 비전",
    "word_name_en": "computer vision",
    "word_def": "컴퓨터가 디지털 이미지나 동영상에서 높은 수준의 이해를 얻을 수 있도록 만드는 방법을 다루는 학제 간 과학 분야입니다. 공학의 관점에서 인간의 시각 시스템이 할 수 있는 작업을 자동화하는 것을 목표로 합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Computer_vision",
    "wordCategory": [
      "ComputerVision"
    ]
  },
  {
    "word_name_kr": "동시성",
    "word_name_en": "Concurrency",
    "word_def": "프로그램, 알고리즘 또는 문제의 여러 부분 또는 단위를 최종 결과에 영향을 주지 않고 순서를 바꾸거나 부분적으로 실행할 수 있는 기능입니다. 이를 통해 동시 실행 단위의 병렬 실행이 가능해져 멀티 프로세서 및 멀티 코어 시스템에서 전체 실행 속도를 크게 향상시킬 수 있습니다. 좀 더 기술적인 용어로 동시성은 프로그램, 알고리즘 또는 문제를 순서와 무관하거나 부분적으로 순서가 지정된 구성 요소 또는 단위로 분해할 수 있는 속성을 말합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Concurrency_(computer_science)",
    "wordCategory": [
      "Concurrency"
    ]
  },
  {
    "word_name_kr": "컨테이너",
    "word_name_en": "container",
    "word_def": "인스턴스가 다른 객체의 모음인 클래스, 데이터 구조 또는 추상 데이터 유형(ADT)입니다. 즉, 특정 액세스 규칙을 따르는 체계적인 방식으로 객체를 저장합니다. 컨테이너의 크기는 컨테이너에 포함된 객체(요소)의 수에 따라 달라집니다. 다양한 컨테이너 유형의 기본(상속된) 구현은 크기와 복잡성이 다를 수 있으며, 주어진 시나리오에 적합한 구현을 유연하게 선택할 수 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Container_(abstract_data_type)",
    "wordCategory": [
      "Container"
    ]
  },
  {
    "word_name_kr": "암호화",
    "word_name_en": "cryptography",
    "word_def": "또는 암호학은 적이라고 불리는 제3자가 있는 상황에서 안전한 통신을 위한 기술을 연구하고 실천하는 학문입니다. 일반적으로 암호화는 제3자 또는 대중이 개인 메시지를 읽지 못하도록 하는 프로토콜을 구성하고 분석하는 것으로, 데이터 기밀성, 데이터 무결성, 인증 및 부인 방지와 같은 정보 보안의 다양한 측면이 현대 암호화의 핵심입니다. 현대의 암호화는 수학, 컴퓨터 과학, 전기 공학, 통신 과학, 물리학 등 여러 학문의 교차점에 존재합니다. 암호화는 전자 상거래, 칩 기반 결제 카드, 디지털 통화, 컴퓨터 암호, 군사 통신 등 다양한 분야에서 활용되고 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Cryptography",
    "wordCategory": [
      "Security"
    ]
  },
  {
    "word_name_kr": "데이터베이스",
    "word_name_en": "database",
    "word_def": "데이터베이스는 구조화된 정보나 데이터를 효율적으로 저장, 검색, 관리할 수 있게 해주는 시스템입니다. 주로 관계형 데이터베이스와 비관계형 데이터베이스의 두 가지 주요 유형으로 분류됩니다. 관계형 데이터베이스는 테이블 간의 관계를 통해 데이터를 구성하며, SQL(Structured Query Language)을 사용하여 데이터에 접근하고 관리합니다. 비관계형 데이터베이스는 문서, 키-값 쌍, 그래프 등 다양한 데이터 모델을 사용하여 더 유연한 데이터 저장 방식을 제공합니다. 데이터베이스는 은행, 온라인 쇼핑, 소셜 네트워크 등 다양한 애플리케이션에서 중요한 역할을 하며, 데이터의 안정성, 무결성, 보안을 보장하는 기능을 포함합니다.",
    "word_summ": "데이터베이스는 정보 저장, 검색, 관리를 위한 시스템으로, 관계형과 비관계형으로 분류됩니다. 관계형은 SQL을 이용해 데이터를 관리하며, 비관계형은 유연한 데이터 저장 방식을 제공합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Database",
    "wordCategory": [
      "Database"
    ]
  },
  {
    "word_name_kr": "데이터 마이닝",
    "word_name_en": "data mining",
    "word_def": "머신 러닝, 통계학, 데이터베이스 시스템의 교차점에 있는 방법을 사용하여 대규모 데이터 세트에서 패턴을 발견하는 프로세스입니다. 데이터 마이닝은 컴퓨터 과학과 통계학의 학제 간 하위 분야로, 데이터 세트에서 지능적인 방법으로 정보를 추출하고 추후 사용을 위해 정보를 이해할 수 있는 구조로 변환하는 것을 전반적인 목표로 합니다. 데이터 마이닝은 '데이터베이스에서 지식 발견' 프로세스, 즉 KDD의 분석 단계입니다. 원시 분석 단계 외에도 데이터베이스 및 데이터 관리 측면, 데이터 전처리, 모델 및 추론 고려 사항, 흥미도 메트릭, 복잡성 고려 사항, 발견된 구조의 후처리, 시각화 및 온라인 업데이트 등이 포함됩니다.",
    "word_link": "https://en.wikipedia.org/wiki/Data_mining",
    "wordCategory": [
      "DataAnalysis"
    ]
  },
  {
    "word_name_kr": "데이터 과학",
    "word_name_en": "data science",
    "word_def": "데이터 마이닝과 유사하게 과학적 방법, 프로세스, 알고리즘 및 시스템을 사용하여 정형 및 비정형의 다양한 형태의 데이터에서 지식과 인사이트를 추출하는 학제 간 분야입니다. 데이터 과학은 데이터로 '실제 현상을 이해하고 분석'하기 위해 통계, 데이터 분석, 머신 러닝 및 관련 방법을 통합하는 개념입니다. 데이터 과학은 수학, 통계학, 정보 과학, 컴퓨터 과학의 맥락에서 여러 분야에서 가져온 기술과 이론을 사용합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Data_science",
    "wordCategory": [
      "DataScience"
    ]
  },
  {
    "word_name_kr": "데이터 구조",
    "word_name_en": "data structure",
    "word_def": "효율적인 접근과 수정을 가능하게 하는 데이터 조직, 관리 및 저장 형식. 보다 정확하게는 데이터 구조는 데이터 값과 데이터 간의 관계, 데이터에 적용할 수 있는 함수나 연산의 집합입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Data_structure",
    "wordCategory": [
      "DataStructure"
    ]
  },
  {
    "word_name_kr": "디버깅",
    "word_name_en": "debugging",
    "word_def": "컴퓨터 소프트웨어 또는 시스템 전체의 올바른 작동을 방해하는 컴퓨터 프로그램 내의 결함이나 문제를 찾아서 해결하는 과정. 디버깅 전술에는 대화형 디버깅, 제어 흐름 분석, 단위 테스트, 통합 테스트, 로그 파일 분석, 애플리케이션 또는 시스템 수준에서의 모니터링, 메모리 덤프 및 프로파일링이 포함될 수 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Debugging",
    "wordCategory": [
      "SoftwareDevelopment"
    ]
  },
  {
    "word_name_kr": "선언",
    "word_name_en": "declaration",
    "word_def": "컴퓨터 프로그래밍에서 식별자의 속성을 지정하는 언어 구조로, 단어(식별자)의 \"의미\"를 선언합니다. 선언은 함수, 변수, 상수, 클래스에 가장 일반적으로 사용되지만 열거형 및 유형 정의와 같은 다른 엔티티에도 사용할 수 있습니다. 이름(식별자 자체)과 엔티티의 종류(함수, 변수 등) 외에도 선언은 일반적으로 데이터 유형(변수 및 상수의 경우) 또는 유형 서명(함수의 경우)을 지정하며, 유형에는 배열과 같은 차원도 포함될 수 있습니다. 선언은 컴파일러에 엔티티의 존재를 알리는 데 사용되며, 이는 함수, 변수, 상수 및 그 유형을 사용하기 전에 선언으로 지정해야 하는 강력한 타입의 언어에서 중요하며, 포워드 선언에 사용됩니다. \"선언\"이라는 용어는 \"정의\"라는 용어와 자주 대조되지만, 그 의미와 용법은 언어마다 크게 다릅니다.",
    "word_link": "https://en.wikipedia.org/wiki/Declaration_(computer_programming)",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "분산 컴퓨팅",
    "word_name_en": "distributed computing",
    "word_def": "분산 시스템을 연구하는 컴퓨터 과학의 한 분야. 분산 시스템은 네트워크로 연결된 서로 다른 컴퓨터에 있는 구성 요소가 서로 메시지를 전달하여 통신하고 동작을 조정하는 시스템입니다. 구성 요소는 공통의 목표를 달성하기 위해 서로 상호 작용합니다. 분산 시스템의 세 가지 중요한 특징은 구성 요소의 동시성, 글로벌 시계의 부재, 구성 요소의 독립적인 장애입니다. 분산 시스템의 예는 SOA 기반 시스템부터 대규모 멀티플레이어 온라인 게임, P2P 애플리케이션에 이르기까지 다양합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Distributed_computing",
    "wordCategory": [
      "Network"
    ]
  },
  {
    "word_name_kr": "도메인",
    "word_name_en": "domain",
    "word_def": "도메인은 특정한 목적이나 범위에 따라 정의된 영역을 의미합니다. 가장 흔한 사용례는 인터넷 도메인 이름으로, 이는 웹사이트 주소를 사용자가 기억하기 쉬운 이름으로 변환하는 데 사용됩니다. 예를 들어, 'www.example.com'의 'example.com' 부분이 도메인 이름입니다. 도메인은 또한 특정 분야 또는 지식의 영역을 지칭할 때도 사용되며, 소프트웨어 개발에서는 문제를 해결하기 위한 특정 영역의 데이터 모델을 설계하는 데 참고됩니다. 도메인 이름 시스템(DNS)은 도메인 이름을 네트워크 주소로 변환하여 컴퓨터가 서로 통신할 수 있도록 합니다. 이렇게 도메인은 인터넷의 구조와 정보의 조직화에 중요한 역할을 하며, 사용자와 개발자 모두에게 편리성을 제공합니다.",
    "word_summ": "도메인은 웹사이트 주소를 사용자 친화적으로 변환하는 인터넷 영역입니다. DNS는 도메인을 네트워크 주소로 매핑, 인터넷의 구조와 정보 조직에 핵심적입니다. 개발에도 데이터 모델 설계에 쓰입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Domain_(software_engineering)",
    "wordCategory": [
      "Network"
    ]
  },
  {
    "word_name_kr": "암호화",
    "word_name_en": "encryption",
    "word_def": "암호화에서 암호화는 정보를 인코딩하는 과정입니다. 이 프로세스는 일반 텍스트라고 하는 정보의 원래 표현을 암호 텍스트라고 하는 대체 형식으로 변환합니다. 이상적으로는 권한이 있는 당사자만 암호 텍스트를 다시 일반 텍스트로 해독하여 원본 정보에 액세스할 수 있습니다. 암호화는 그 자체로 간섭을 방지하는 것이 아니라 가로채려는 사람이 이해할 수 있는 콘텐츠를 거부합니다. 기술적인 이유로 암호화 체계는 일반적으로 알고리즘에 의해 생성된 의사 무작위 암호화 키를 사용합니다. 키를 가지고 있지 않아도 메시지를 해독할 수 있지만, 잘 설계된 암호화 체계의 경우 상당한 컴퓨팅 리소스와 기술이 필요합니다. 권한이 있는 수신자는 발신자가 수신자에게 제공한 키로 메시지를 쉽게 해독할 수 있지만 권한이 없는 사용자에게는 해독할 수 없습니다. 역사적으로 다양한 형태의 암호화가 암호화를 지원하는 데 사용되었습니다. 초기 암호화 기술은 종종 군사 메시징에 활용되었습니다. 그 이후로 새로운 기술이 등장하여 현대 컴퓨팅의 모든 영역에서 보편화되었습니다. 최신 암호화 체계는 공개 키와 대칭 키의 개념을 활용합니다. 최신 암호화 기술은 최신 컴퓨터가 암호화를 해독하는 데 비효율적이기 때문에 보안을 보장합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Encryption",
    "wordCategory": [
      "Security"
    ]
  },
  {
    "word_name_kr": "이벤트",
    "word_name_en": "event",
    "word_def": "소프트웨어가 인식하는 동작 또는 발생으로, 종종 외부 환경에서 비동기적으로 발생하여 소프트웨어가 처리할 수 있습니다. 이벤트는 동작과 동작을 트리거하는 컨텍스트 변수를 캡슐화하는 엔티티이므로 개념을 명확히 하기 위해 \"명명된 트리거를 캡슐화하는 실행 변수\"라는 아크로스틱 니모닉이 자주 사용됩니다.",
    "word_link": "https://en.wikipedia.org/wiki/Event_(computing)",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "이벤트 중심 프로그래밍",
    "word_name_en": "event-driven programming",
    "word_def": "사용자 동작(마우스 클릭, 키 누름), 센서 출력, 다른 프로그램이나 스레드의 메시지와 같은 이벤트에 의해 프로그램의 흐름이 결정되는 프로그래밍 패러다임. 이벤트 중심 프로그래밍은 사용자 입력에 따라 특정 작업을 수행하는 데 중점을 두는 그래픽 사용자 인터페이스 및 기타 애플리케이션(예: JavaScript 웹 애플리케이션)에서 주로 사용되는 패러다임입니다. 이는 장치 드라이버(예: USB 장치 드라이버 스택의 P)를 위한 프로그래밍에도 적용됩니다.",
    "word_link": "https://en.wikipedia.org/wiki/Event-driven_programming",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "실행",
    "word_name_en": "execution",
    "word_def": "컴퓨터 및 소프트웨어 공학에서 컴퓨터 또는 가상 머신이 컴퓨터 프로그램의 명령을 실행하는 프로세스를 말합니다. 프로그램의 각 명령어는 특정 동작에 대한 설명입니다.\n특정 문제를 해결하기 위해 수행해야 하는 작업; 프로그램의 명령어와 그에 따라 설명하는 작업이 실행 중인 기계에 의해 수행됨에 따라 실행 중인 명령어의 의미에 따라 특정 효과가 생성됩니다.",
    "word_link": "https://en.wikipedia.org/wiki/Execution_(computing)",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "예외 처리",
    "word_name_en": "exception handling",
    "word_def": "계산 중에 예외(특별한 처리가 필요한 비정상적이거나 예외적인 조건)가 발생하여 프로그램 실행의 정상적인 흐름을 방해하는 경우에 대응하는 프로세스입니다. 특수 프로그래밍 언어 구조, 인터럽트와 같은 컴퓨터 하드웨어 메커니즘 또는 신호와 같은 운영 체제 IPC 기능에 의해 제공됩니다.",
    "word_link": "https://en.wikipedia.org/wiki/Exception_handling",
    "wordCategory": [
      "Error"
    ]
  },
  {
    "word_name_kr": "표현식",
    "word_name_en": "expression",
    "word_def": "프로그래밍 언어에서 하나 이상의 상수, 변수, 연산자 및 함수의 조합으로, 프로그래밍 언어가 특정 우선순위 및 연관 규칙에 따라 해석하고 계산하여 다른 값을 생성(\"반환\", 상태 저장 환경에서)하는 것을 말합니다. 수학 표현식의 경우 이 과정을 평가라고 합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Expression_(computer_science)",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "내결함성 컴퓨터 시스템",
    "word_name_en": "fault-tolerant computer system",
    "word_def": "내결함성 개념을 중심으로 설계된 시스템. 본질적으로 오류나 고장이 발생하더라도 만족할 만한 수준으로 작업을 계속할 수 있어야 합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Fault-tolerant_computer_system",
    "wordCategory": [
      "Fault",
      "System"
    ]
  },
  {
    "word_name_kr": "필드",
    "word_name_en": "field",
    "word_def": "레코드라고 하는 여러 부분으로 이루어진 데이터는 필드로 나눌 수 있습니다. 관계형 데이터베이스는 데이터를 행이라고 하는 데이터베이스 레코드 집합으로 정렬합니다. 각 레코드는 여러 개의 필드로 구성되며, 모든 레코드의 필드가 열을 형성합니다.\n필드의 예: 이름, 성별, 머리 색깔.",
    "word_link": "https://en.wikipedia.org/wiki/Field_(computer_science)",
    "wordCategory": [
      "DataStructure"
    ]
  },
  {
    "word_name_kr": "부동 소수점 산술",
    "word_name_en": "floating point arithmetic",
    "word_def": "컴퓨팅에서 부동 소수점 연산(FP)은 범위와 정밀도 사이의 절충점을 지원하기 위해 실수를 근사치로 표현하는 수식을 사용하는 산술 연산입니다. 이러한 이유로 부동소수점 연산은 빠른 처리 시간이 필요한 매우 작거나 매우 큰 실수를 포함하는 시스템에서 자주 사용됩니다. 일반적으로 숫자는 대략 고정된 수의 유효 자릿수(실수)로 표현되고 고정된 기저의 지수를 사용하여 스케일링되며, 스케일링의 기저는 일반적으로 2, 10 또는 16입니다. 정확히 표현할 수 있는 숫자는 다음과 같은 형식입니다:\n여기서 지수는 정수, 밑변은 2보다 크거나 같은 정수, 지수는 역시 정수입니다.\n예를 들어",
    "word_link": "https://en.wikipedia.org/wiki/Floating_point_arithmetic",
    "wordCategory": [
      "DataType"
    ]
  },
  {
    "word_name_kr": "함수형 프로그래밍",
    "word_name_en": "functional programming",
    "word_def": "컴퓨터 프로그램의 구조와 요소를 구축하는 방식인 프로그래밍 패러다임으로, 연산을 수학 함수의 평가로 취급하고 상태 및 변경 가능한 데이터의 변경을 피하는 프로그래밍 방식입니다. 명령문 대신 표현식이나 선언을 사용하여 프로그래밍을 수행한다는 점에서 선언적 프로그래밍 패러다임입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Functional_programming",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "게임 이론",
    "word_name_en": "game theory",
    "word_def": "합리적인 의사 결정자 간의 전략적 상호작용에 대한 수학적 모델을 연구하는 학문. 논리학과 컴퓨터 과학뿐만 아니라 사회과학의 모든 분야에 응용되고 있습니다. 원래는 각 참가자의 이익이나 손실이 다른 참가자의 이익이나 손실과 정확히 균형을 이루는 제로섬 게임을 다루었습니다. 오늘날 게임 이론은 다양한 행동 관계에 적용되며, 인간, 동물, 컴퓨터의 논리적 의사 결정 과학을 포괄하는 용어가 되었습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Game_theory",
    "wordCategory": [
      "Theory"
    ]
  },
  {
    "word_name_kr": "가비지 인, 가비지 아웃(GIGO)",
    "word_name_en": "garbage in, garbage out (GIGO)",
    "word_def": "결함이 있거나 말도 안 되는 입력 데이터는 말도 안 되는 출력 또는 \"쓰레기\"를 생성한다는 개념을 설명하는 데 사용되는 용어입니다. 또한 잘못 작성된 프로그램이 말도 안 되는 동작을 생성할 수 있는 프로그래밍의 용서할 수 없는 특성을 의미하기도 합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Garbage_in,_garbage_out",
    "wordCategory": [
      "DataProcessing"
    ]
  },
  {
    "word_name_kr": "기가바이트",
    "word_name_en": "gigabyte",
    "word_def": "기가바이트(GB)는 디지털 정보의 저장 용량을 측정하는 단위로, 약 10억 바이트에 해당합니다. 정확하게는 1기가바이트가 1,073,741,824바이트(2의 30승)임을 나타내는 이진법 표기법을 사용하기도 합니다. 하지만, 컴퓨터 과학 및 정보 기술 분야 외에는 1GB를 1,000,000,000바이트(10의 9승)로 간주하는 경우도 많습니다. 이 단위는 주로 하드 드라이브, SSD, USB 메모리 스틱 같은 저장 매체의 용량을 표시하는 데 사용됩니다. 또한, 소프트웨어 파일 크기, 시스템 메모리, 온라인 저장소 공간 등을 나타낼 때도 쓰입니다. 기가바이트는 테라바이트(TB)에 이어서 데이터 용량을 나타내는 데 있어 일반적으로 사용되는 큰 단위 중 하나입니다.",
    "word_summ": "기가바이트(GB)는 데이터 저장 용량 단위로, 10억 바이트 또는 2의 30승 바이트에 해당합니다. 하드 드라이브와 SSD 같은 저장 매체, 파일 크기 표시에 주로 사용됩니다. 컴퓨터와 IT 분야에서 널리 쓰이며, 테라바이트(TB) 다음으로 큰 단위입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Gigabyte",
    "wordCategory": [
      "Data"
    ]
  },
  {
    "word_name_kr": "전역 변수",
    "word_name_en": "global variable",
    "word_def": "전역 변수는 컴퓨터 프로그래밍에서 전역 범위를 가지며, 프로그램 전체에서 볼 수 있고 접근할 수 있는 변수입니다. 이러한 변수들의 집합은 전역 환경 또는 전역 상태라고 불리며, 섀도잉되지 않는 한 어디서든 값을 읽고 수정할 수 있습니다. 컴파일된 언어에서 전역 변수는 프로그램의 전체 런타임 동안 존재하는 정적 변수로 처리되는 반면, 인터프리트 언어에서는 선언 시 동적으로 할당되어 프로그램 실행 중에도 변경될 수 있습니다. 전역 변수의 사용은 데이터를 프로그램의 여러 부분 사이에서 공유할 필요가 있을 때 유용하지만, 과도한 사용은 프로그램의 모듈성을 해치고, 디버깅을 어렵게 만들며, 예기치 않은 오류의 원인이 될 수 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Global_variable",
    "word_summ": "전역 변수는 프로그램 내 어디서나 접근 가능한 변수입니다. 컴파일 언어에선 정적 변수로, 인터프리트 언어에선 동적 변수로 처리됩니다. 전역 변수의 과도한 사용은 모듈성 저하 및 오류 위험 증가시키므로 주의가 필요합니다.",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "그래프 이론",
    "word_name_en": "graph theory",
    "word_def": "수학에서는 개체 간의 쌍 관계를 모델링하는 데 사용되는 수학적 구조인 그래프를 연구합니다. 이 맥락에서 그래프는 정점(노드 또는 점이라고도 함)과 가장자리(링크 또는 선이라고도 함)로 연결된 그래프로 구성됩니다. 가장자리가 두 정점을 대칭으로 연결하는 무방향 그래프와 가장자리가 두 정점을 비대칭으로 연결하는 방향 그래프로 구분할 수 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Graph_theory",
    "wordCategory": [
      "Theory"
    ]
  },
  {
    "word_name_kr": "해시 테이블",
    "word_name_en": "hash table",
    "word_def": "해시 테이블은 키-값 쌍을 저장하는 효율적인 데이터 구조로, 해시 함수를 사용해 키를 해시 테이블 내의 주소로 변환하여 데이터를 빠르게 삽입하고 검색할 수 있습니다. 이 과정에서 해시 함수는 키를 고유한 인덱스에 매핑하여, 해당 인덱스에 값을 저장하거나 검색합니다. 충돌이 발생할 경우, 체이닝이나 오픈 어드레싱 같은 기법을 사용해 해결할 수 있습니다. 해시 테이블의 주요 장점은 평균 시간 복잡도가 O(1)이라는 점으로, 대량의 데이터를 관리할 때 높은 성능을 보입니다. 데이터베이스, 캐싱, 유일한 아이템 관리 등 다양한 분야에서 널리 사용됩니다.",
    "word_summ": "해시 테이블은 키-값 쌍 저장에 해시 함수를 쓰며, O(1) 시간 복잡도로 삽입과 검색을 가능하게 합니다. 충돌 해결 기법을 통해 안정적이며, 다양한 분야에서 활용됩니다.",
    "word_link": "https://en.wikipedia.org/wiki/Hash_table",
    "wordCategory": [
      "Hashing",
      "DataStructure"
    ]
  },
  {
    "word_name_kr": "힙",
    "word_name_en": "heap",
    "word_def": "힙 속성을 만족하는 거의 완전한 트리인 특수 트리 기반 데이터 구조로, P가 C의 부모 노드인 경우 P의 키(값)는 (최대 힙에서) C의 키보다 크거나 같거나 (최소 힙에서) 작습니다. 힙의 '맨 위'에 있는 노드(부모가 없는 노드)를 루트 노드라고 합니다.",
    "word_summ": "힙은 특수 트리 기반 데이터 구조로, 부모 노드의 키가 자식 노드의 키보다 크거나 같은 경우(최대 힙) 또는 작은 경우(최소 힙)를 만족합니다. 루트 노드는 힙의 최상위에 위치하며, 부모가 없는 노드입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Heap_(data_structure)",
    "wordCategory": [
      "DataStructure"
    ]
  },
  {
    "word_name_kr": "인간-컴퓨터 상호 작용(HCI)",
    "word_name_en": "human-computer interaction (HCI)",
    "word_def": "사람(사용자)과 컴퓨터 간의 인터페이스에 중점을 두고 컴퓨터 기술의 설계와 사용을 연구합니다. HCI 분야의 연구자들은 인간이 컴퓨터와 상호작용하는 방식을 관찰하고, 인간이 컴퓨터와 새로운 방식으로 상호작용할 수 있는 기술을 설계합니다. 연구 분야로서 인간과 컴퓨터의 상호작용은 컴퓨터 과학, 행동 과학, 디자인, 미디어 연구 및 기타 여러 연구 분야의 교차점에 위치합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Human-computer_interaction",
    "wordCategory": [
      "HumanInteraction"
    ]
  },
  {
    "word_name_kr": "식별자",
    "word_name_en": "identifier",
    "word_def": "컴퓨터 언어에서 식별자는 언어 엔티티의 이름을 지정하는 토큰(기호라고도 함)입니다. 식별자가 나타낼 수 있는 엔티티의 종류에는 변수, 유형, 레이블, 서브루틴, 패키지 등이 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Identifier_(computer_science)",
    "wordCategory": [
      "Identifier",
      "Programming"
    ]
  },
  {
    "word_name_kr": "명령형 프로그래밍",
    "word_name_en": "imperative programming",
    "word_def": "프로그램의 상태를 변경하는 명령문을 사용하는 프로그래밍 패러다임. 자연어에서 명령문이 명령을 표현하는 것과 마찬가지로 명령형 프로그램은 컴퓨터가 수행해야 할 명령으로 구성됩니다. 명령형 프로그래밍은 프로그램의 작동 방식을 설명하는 데 중점을 둡니다.",
    "word_link": "https://en.wikipedia.org/wiki/Imperative_programming",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "상속",
    "word_name_en": "inheritance",
    "word_def": "객체 지향 프로그래밍에서 객체 또는 클래스를 다른 객체(프로토타입 기반 상속) 또는 클래스(클래스 기반 상속)에 기반하여 유사한 구현을 유지하는 메커니즘. 기존 클래스(수퍼 클래스 또는 베이스 클래스)에서 새로운 클래스(서브 클래스)를 파생하여 클래스의 계층 구조를 형성하는 것으로도 정의됩니다.",
    "word_link": "https://en.wikipedia.org/wiki/Inheritance_(computer_science)",
    "wordCategory": [
      "OOP"
    ]
  },
  {
    "word_name_kr": "삽입 정렬",
    "word_name_en": "insertion sort",
    "word_def": "한 번에 한 항목씩 최종 정렬된 배열(또는 목록)을 구축하는 간단한 정렬 알고리즘입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Insertion_sort",
    "wordCategory": [
      "SortingAlgorithm"
    ]
  },
  {
    "word_name_kr": "정수",
    "word_name_en": "integer",
    "word_def": "정수 데이터 형식의 데이텀으로, 특정 범위의 수학적 정수를 나타내는 데이터 형식입니다. 정수 데이터 유형은 크기가 다를 수 있으며 음수 값을 포함할 수도 있고 포함하지 않을 수도 있습니다. 정수는 일반적으로 컴퓨터에서 2진수(비트) 그룹으로 표시됩니다. 그룹화의 크기는 다양하므로 사용 가능한 정수 크기 집합은 컴퓨터 유형에 따라 다릅니다. 가상 머신을 포함한 컴퓨터 하드웨어는 거의 항상 프로세서 레지스터나 메모리 주소를 정수로 표현하는 방법을 제공합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Integer_(computer_science)",
    "wordCategory": [
      "DataType"
    ]
  },
  {
    "word_name_kr": "통합 테스트",
    "word_name_en": "integration testing",
    "word_def": "통합 테스트(통합 및 테스트라고도 하며 약어로 I&T라고도 함)는 개별 소프트웨어 모듈을 그룹으로 결합하여 테스트하는 소프트웨어 테스트의 한 단계입니다. 통합 테스트는 시스템 또는 구성 요소가 지정된 기능 요구 사항을 준수하는지 평가하기 위해 수행됩니다. 단위 테스트 이후와 유효성 검사 테스트 전에 수행됩니다. 통합 테스트는 단위 테스트를 거친 모듈을 입력으로 받아 더 큰 집합으로 그룹화하고, 통합 테스트 계획에 정의된 테스트를 해당 집합에 적용한 다음, 시스템 테스트에 사용할 준비가 된 통합 시스템을 출력으로 제공합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Integration_testing",
    "wordCategory": [
      "Testing"
    ]
  },
  {
    "word_name_kr": "인터페이스",
    "word_name_en": "interface",
    "word_def": "컴퓨터 시스템의 두 개 이상의 개별 구성 요소가 정보를 교환하는 공유 경계. 교환은 소프트웨어, 컴퓨터 하드웨어, 주변 장치, 사람, 그리고 이들의 조합 사이에서 이루어질 수 있습니다. 터치스크린과 같은 일부 컴퓨터 하드웨어 장치는 인터페이스를 통해 데이터를 주고받을 수 있는 반면, 마우스나 마이크와 같은 다른 장치는 특정 시스템으로 데이터를 전송하기 위한 인터페이스만 제공할 수 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Interface_(computing)",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "인터프리터",
    "word_name_en": "interpreter",
    "word_def": "프로그래밍 또는 스크립팅 언어로 작성된 명령어를 이전에 기계어 프로그램으로 컴파일할 필요 없이 직접 실행하는 컴퓨터 프로그램.",
    "word_link": "https://en.wikipedia.org/wiki/Interpreter_(computing)",
    "wordCategory": [
      "SoftwareDevelopment"
    ]
  },
  {
    "word_name_kr": "불변성",
    "word_name_en": "invariant",
    "word_def": "프로그램을 실행하는 동안 또는 프로그램의 일부분에서 참이라고 신뢰할 수 있는 불변성을 만날 수 있습니다. 이는 실행의 특정 단계에서 항상 참으로 유지되는 논리적 단언입니다. 예를 들어, 루프 불변성은 루프의 모든 실행의 시작과 끝에서 참인 조건입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Invariant_(computer_science)",
    "wordCategory": [
      "Invariant",
      "Logic"
    ]
  },
  {
    "word_name_kr": "자바",
    "word_name_en": "Java",
    "word_def": "Java는 Sun Microsystems에 의해 개발된 객체 지향, 클래스 기반의 프로그래밍 언어로, \"한 번 작성하면 어디서나 실행할 수 있는\" 플랫폼 독립적인 코드 작성을 목표로 합니다. Java 애플리케이션은 Java 가상 머신(JVM) 위에서 실행되며, 웹 서버, 모바일 앱(특히 안드로이드), 기업용 애플리케이션 등 다양한 분야에 활용됩니다. 상속, 캡슐화, 다형성을 지원하며, 강력한 표준 라이브러리와 가비지 컬렉션, 멀티스레딩 지원 등을 통해 안정적이고 효율적인 소프트웨어 개발을 가능하게 합니다.",
    "word_summ": "Java는 클래스 기반, 객체 지향 언어로, 플랫폼 독립적 실행을 목표로 합니다. JVM에서 동작하며 다양한 분야에 적용됩니다. 상속, 캡슐화, 다형성 지원과 함께 풍부한 라이브러리를 제공합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Java_(programming_language)",
    "wordCategory": [
      "Java",
      "ProgrammingLanguage"
    ]
  },
  {
    "word_name_kr": "커널",
    "word_name_en": "kernel",
    "word_def": "메모리에 로드되는 운영 체제의 첫 번째 섹션. 운영 체제의 중심인 커널은 작고 효율적이어야 하며, 덮어쓸 수 없도록 메모리의 보호된 영역에 로드되어야 합니다. 커널은 디스크 드라이브 관리, 파일 관리, 메모리 관리, 프로세스 관리 등과 같은 필수 작업을 담당할 수 있습니다.",
    "word_summ": "운영 체제의 핵심인 커널은 메모리의 보호 영역에 로드되며, 시스템 자원 관리와 중요 작업(디스크, 파일, 메모리, 프로세스 관리)을 담당합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Kernel_(operating_system)",
    "wordCategory": [
      "OperatingSystem"
    ]
  },
  {
    "word_name_kr": "연결 리스트",
    "word_name_en": "linked list",
    "word_def": "메모리 내 물리적 위치에 따라 순서가 지정되지 않는 데이터 요소의 선형 컬렉션입니다. 대신 각 요소는 다음 요소를 가리킵니다. 시퀀스를 함께 나타내는 노드 모음으로 구성된 데이터 구조입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Linked_list",
    "wordCategory": [
      "DataStructure"
    ]
  },
  {
    "word_name_kr": "링커",
    "word_name_en": "linker",
    "word_def": " 또는 링크 편집기는 컴파일러나 어셈블러에서 생성된 하나 이상의 객체 파일을 가져와서 하나의 실행 파일, 라이브러리 파일 또는 다른 '객체' 파일로 결합하는 컴퓨터 유틸리티 프로그램입니다.  출력을 메모리에 직접 기록하는 더 간단한 버전을 로더라고 하지만, 로딩은 일반적으로 별도의 프로세스로 간주됩니다.",
    "word_link": "https://en.wikipedia.org/wiki/Linker_(computing)",
    "wordCategory": [
      "SoftwareDevelopment"
    ]
  },
  {
    "word_name_kr": "리스트",
    "word_name_en": "list",
    "word_def": "동일한 값이 두 번 이상 나타날 수 있는 정렬된 값의 셀 수 있는 수를 나타내는 추상 데이터 유형입니다. 리스트의 인스턴스는 유한 수열이라는 수학적 개념을 컴퓨터로 표현한 것으로, 리스트의 (잠재적으로) 무한한 아날로그는 스트림입니다:§3.5 리스트는 다른 값을 포함하기 때문에 컨테이너의 기본 예시입니다. 같은 값이 여러 번 나타나는 경우, 각 값은 별개의 항목으로 간주됩니다.",
    "word_link": "https://en.wikipedia.org/wiki/List_(abstract_data_type)",
    "wordCategory": [
      "DataStructure"
    ]
  },
  {
    "word_name_kr": "로더",
    "word_name_en": "loader",
    "word_def": "프로그램 및 라이브러리 로드를 담당하는 운영 체제의 일부입니다. 프로그램을 메모리에 배치하고 실행을 준비하기 때문에 프로그램을 시작하는 과정에서 필수적인 단계 중 하나입니다. 프로그램을 로드하려면 프로그램 명령어가 포함된 실행 파일의 내용을 메모리로 읽은 다음 실행 파일의 실행을 준비하는 데 필요한 기타 준비 작업을 수행해야 합니다. 로딩이 완료되면 운영 체제는 로드된 프로그램 코드에 제어권을 전달하여 프로그램을 시작합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Loader_(computing)",
    "wordCategory": [
      "SoftwareDevelopment"
    ]
  },
  {
    "word_name_kr": "논리 오류",
    "word_name_en": "logic error",
    "word_def": "컴퓨터 프로그래밍에서 프로그램이 잘못 작동하지만 비정상적으로 종료(또는 충돌)되지는 않는 버그를 말합니다. 논리 오류는 의도하지 않았거나 원치 않는 출력 또는 기타 동작을 발생시키지만 즉시 인식되지 않을 수도 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Logic_error",
    "wordCategory": [
      "Error"
    ]
  },
  {
    "word_name_kr": "행렬",
    "word_name_en": "matrix",
    "word_def": "수학에서 행렬(복수 행렬)은 행과 열로 배열된 숫자, 기호 또는 식의 직사각형 배열(불규칙 행렬 참조)입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Matrix_(mathematics)",
    "wordCategory": [
      "DataStructure"
    ]
  },
  {
    "word_name_kr": "메모리",
    "word_name_en": "memory",
    "word_def": "흔히 스토리지라고 불리는 컴퓨터 데이터 저장소는 디지털 데이터를 보관하는 데 사용되는 컴퓨터 구성 요소와 기록 매체로 구성된 기술입니다. 이는 컴퓨터의 핵심 기능이자 기본 구성 요소입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Computer_data_storage",
    "wordCategory": [
      "Memory"
    ]
  },
  {
    "word_name_kr": "메서드",
    "word_name_en": "method",
    "word_def": "객체 지향 프로그래밍(OOP)에서 메시지 및 객체와 관련된 프로시저. 객체는 데이터와 동작으로 구성됩니다. 데이터와 동작은 객체의 다양한 소비자가 객체를 어떻게 활용할 수 있는지를 지정하는 인터페이스를 구성합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Method_(computer_programming)",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "노드",
    "word_name_en": "node",
    "word_def": "링크된 목록이나 트리 데이터 구조와 같은 데이터 구조의 기본 단위입니다. 노드는 데이터를 포함하며 다른 노드에 연결될 수도 있습니다. 노드 간의 링크는 종종 포인터로 구현됩니다.",
    "word_link": "https://en.wikipedia.org/wiki/Node_(computer_science)",
    "wordCategory": [
      "DataStructure"
    ]
  },
  {
    "word_name_kr": "객체",
    "word_name_en": "object",
    "word_def": "객체는 변수, 데이터 구조체, 함수 또는 메서드일 수 있으며 식별자에 의해 참조되는 메모리 내 값입니다.  클래스 기반 객체 지향 프로그래밍 패러다임에서 객체는 클래스의 특정 인스턴스를 의미하며, 객체는 변수, 함수, 데이터 구조의 조합이 될 수 있습니다.  관계형 데이터베이스 관리에서 객체는 테이블이나 열 또는 데이터와 데이터베이스 엔티티 간의 연결(예: 사람의 나이를 특정 사람과 연관시키는 것)일 수 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Object_(computer_science)",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "페어 프로그래밍",
    "word_name_en": "pair programming",
    "word_def": "두 명의 프로그래머가 하나의 워크스테이션에서 함께 작업하는 애자일 소프트웨어 개발 기법. 한 명은 드라이버로서 코드를 작성하고 다른 한 명은 관찰자 또는 내비게이터로서 입력된 코드를 한 줄 한 줄 검토합니다. 두 프로그래머는 자주 역할을 바꿔가며 작업합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Pair_programming",
    "wordCategory": [
      "Collaboration"
    ]
  },
  {
    "word_name_kr": "병렬 컴퓨팅",
    "word_name_en": "parallel computing",
    "word_def": "많은 계산 또는 프로세스 실행이 동시에 수행되는 계산 유형입니다. 큰 문제를 작은 문제로 나누어 동시에 해결할 수 있는 경우가 많습니다. 병렬 컴퓨팅에는 비트 수준, 명령어 수준, 데이터 및 작업 병렬 처리 등 여러 가지 형태가 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Parallel_computing",
    "wordCategory": [
      "Computing"
    ]
  },
  {
    "word_name_kr": "포인터",
    "word_name_en": "pointer",
    "word_def": "메모리 주소를 저장하는 여러 프로그래밍 언어의 객체입니다. 이는 컴퓨터 메모리에 있는 다른 값의 주소일 수도 있고, 경우에 따라서는 메모리 매핑된 컴퓨터 하드웨어의 주소일 수도 있습니다. 포인터는 메모리의 특정 위치를 참조하며, 해당 위치에 저장된 값을 가져오는 것을 포인터 역참조라고 합니다. 책 색인의 페이지 번호는 해당 페이지에 대한 포인터로 간주할 수 있으며, 이러한 포인터를 역참조하려면 주어진 페이지 번호가 있는 페이지로 넘겨 해당 페이지에 있는 텍스트를 읽으면 됩니다. 포인터 변수의 실제 형식과 내용은 기본 컴퓨터 아키텍처에 따라 달라집니다.",
    "word_link": "https://en.wikipedia.org/wiki/Pointer_(computer_programming)",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "사후 조건",
    "word_name_en": "postcondition",
    "word_def": "컴퓨터 프로그래밍에서 코드의 일부 섹션이 실행된 직후 또는 공식적인 사양에서 연산이 수행된 직후에 항상 참이어야 하는 조건 또는 술어입니다. 사후 조건은 때때로 코드 자체 내의 어설션을 사용하여 테스트됩니다. 종종 후행 조건은 영향을 받는 코드 섹션의 문서에 간단히 포함되기도 합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Postcondition",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "전제 조건",
    "word_name_en": "precondition",
    "word_def": "컴퓨터 프로그래밍에서 코드의 일부 섹션을 실행하기 직전 또는 공식 사양의 연산 전에 항상 참이어야 하는 조건 또는 술어.  전제 조건이 위반되면 해당 코드 섹션의 효과가 정의되지 않아 의도한 작업이 수행될 수도 있고 수행되지 않을 수도 있습니다.  잘못된 전제 조건으로 인해 보안 문제가 발생할 수 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Precondition",
    "wordCategory": [
      "Precondition",
      "Programming"
    ]
  },
  {
    "word_name_kr": "우선순위 대기열",
    "word_name_en": "priority queue",
    "word_def": "일반 큐 또는 스택 데이터 구조와 비슷하지만 각 요소에 '우선순위'가 추가로 연결된 추상 데이터 유형입니다. 우선순위 큐에서는 우선순위가 높은 요소가 우선순위가 낮은 요소보다 먼저 제공됩니다. 일부 구현에서는 두 요소의 우선순위가 같으면 대기열에 추가된 순서에 따라 제공되지만, 다른 구현에서는 우선순위가 같은 요소의 순서가 정의되지 않습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Priority_queue",
    "wordCategory": [
      "DataStructure"
    ]
  },
  {
    "word_name_kr": "프로시저",
    "word_name_en": "procedure",
    "word_def": "컴퓨터 프로그래밍에서 서브루틴은 특정 작업을 수행하는 일련의 프로그램 명령어를 하나의 단위로 묶은 것입니다. 이 단위는 특정 작업을 수행해야 하는 모든 프로그램에서 사용할 수 있습니다.  서브루틴은 프로그램 내에 정의할 수도 있고, 여러 프로그램에서 사용할 수 있는 라이브러리에 별도로 정의할 수도 있습니다.  다른 프로그래밍 언어에서는 서브루틴을 루틴, 하위 프로그램, 함수, 메서드 또는 프로시저라고 부를 수 있습니다. 엄밀히 말하면 이러한 용어는 모두 다른 정의를 가지고 있습니다. 호출 가능한 단위라는 일반적인 포괄적 용어가 사용되기도 합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Procedure_(computer_science)",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "파이썬",
    "word_name_en": "Python",
    "word_def": "해석된 고수준 범용 프로그래밍 언어입니다. 귀도 반 로섬이 만들고 1991년에 처음 출시된 파이썬의 디자인 철학은 상당한 공백을 사용하여 코드 가독성을 강조합니다. 언어 구조와 객체 지향 접근 방식은 프로그래머가 소규모 및 대규모 프로젝트를 위한 명확하고 논리적인 코드를 작성할 수 있도록 지원합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Python_(programming_language)",
    "wordCategory": [
      "ProgrammingLanguage"
    ]
  },
  {
    "word_name_kr": "큐",
    "word_name_en": "queue",
    "word_def": "컬렉션의 엔티티가 순서대로 유지되는 컬렉션으로, 컬렉션의 주요(또는 유일한) 작업은 엔큐로 알려진 후단 위치에 엔티티를 추가하고 큐로 알려진 앞단 위치에서 엔티티를 제거하는 것입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Queue_(abstract_data_type)",
    "wordCategory": [
      "DataStructure"
    ]
  },
  {
    "word_name_kr": "레코드",
    "word_name_en": "record",
    "word_def": "레코드(구조, 구조체 또는 복합 데이터라고도 함)는 기본 데이터 구조입니다. 데이터베이스나 스프레드시트의 레코드는 일반적으로 \"행\"이라고 합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Record_(computer_science)",
    "wordCategory": [
      "DataStructure"
    ]
  },
  {
    "word_name_kr": "재귀",
    "word_name_en": "recursion",
    "word_def": "어떤 사물이 그 자체 또는 그 유형에 따라 정의될 때 발생합니다. 재귀는 언어학에서 논리학에 이르기까지 다양한 분야에서 사용됩니다. 재귀가 가장 일반적으로 적용되는 분야는 수학과 컴퓨터 과학으로, 정의되는 함수가 그 자체의 정의 내에서 적용되는 경우입니다. 이는 겉보기에는 무한한 수의 인스턴스(함수 값)를 정의하지만, 무한 루프나 무한 참조 체인이 발생하지 않도록 하는 방식으로 수행되는 경우가 많습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Recursion",
    "wordCategory": [
      "Algorithm"
    ]
  },
  {
    "word_name_kr": "참조",
    "word_name_en": "reference",
    "word_def": "프로그램이 컴퓨터의 메모리 또는 다른 저장 장치에 있는 변수 값이나 레코드와 같은 특정 데이터에 간접적으로 액세스할 수 있도록 하는 값입니다.  참조를 기준점이라고 하며, 기준점에 액세스하는 것을 참조 역참조라고 합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Reference_(computer_science)",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "참조 카운팅",
    "word_name_en": "reference counting",
    "word_def": "객체, 메모리 블록, 디스크 공간 등과 같은 리소스에 대한 참조, 포인터 또는 핸들의 수를 저장하는 프로그래밍 기법입니다. 가비지 컬렉션 알고리즘에서 참조 횟수는 더 이상 필요하지 않은 객체의 할당을 해제하는 데 사용될 수 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Reference_counting",
    "wordCategory": [
      "OperatingSystem"
    ]
  },
  {
    "word_name_kr": "관계형 데이터베이스",
    "word_name_en": "relational database",
    "word_def": "1970년 E. F. 코드가 제안한 데이터의 관계형 모델을 기반으로 하는 디지털 데이터베이스입니다.\n관계형 데이터베이스를 유지하는 데 사용되는 소프트웨어 시스템은 관계형 데이터베이스 관리 시스템(RDBMS)입니다. 많은 관계형 데이터베이스 시스템에는 데이터베이스를 쿼리하고 유지 관리하기 위해 SQL(구조적 쿼리 언어)을 사용하는 옵션이 있습니다[더 나은 출처 필요].",
    "word_link": "https://en.wikipedia.org/wiki/Relational_database",
    "wordCategory": [
      "Database"
    ]
  },
  {
    "word_name_kr": "회귀 테스트",
    "word_name_en": "regression testing",
    "word_def": "(회귀 테스트는 이전에 개발 및 테스트한 소프트웨어가 변경 후에도 여전히 작동하는지 확인하기 위해 기능 및 비기능 테스트를 다시 실행하는 것입니다. 그렇지 않은 경우 회귀라고 합니다. 회귀 테스트가 필요할 수 있는 변경 사항에는 버그 수정, 소프트웨어 개선, 구성 변경, 심지어 전자 부품의 교체까지 포함됩니다. 회귀 테스트 스위트는 결함이 발견될 때마다 증가하는 경향이 있으므로 테스트 자동화가 자주 사용됩니다. 때로는 적절한 테스트 하위 집합을 결정하기 위해 변경 영향 분석을 수행하기도 합니다(비회귀 분석).",
    "word_link": "https://en.wikipedia.org/wiki/Regression_testing",
    "wordCategory": [
      "Testing"
    ]
  },
  {
    "word_name_kr": "라우터",
    "word_name_en": "router",
    "word_def": "라우터는 네트워크 간의 데이터 패킷을 전송하는 장치로, 인터넷을 포함한 다양한 네트워크에서 데이터를 올바른 목적지로 안내하는 역할을 합니다. 라우터는 데이터 패킷이 도착해야 할 최종 목적지의 주소를 기반으로 패킷을 적절한 경로로 전달하기 위해 라우팅 테이블을 사용합니다. 이 과정에서 라우터는 패킷의 헤더 정보를 분석하여, 패킷을 다음 네트워크로 전송할지, 아니면 목적지에 도달했는지 결정합니다. 라우터는 네트워크의 경계에서 작동하여, 서로 다른 네트워크 간의 통신을 가능하게 하고, 네트워크 트래픽을 관리하며, 보안 기능을 제공하여 네트워크를 보호하는 중요한 장비입니다.",
    "word_summ": "라우터는 네트워크 간 데이터 패킷을 전송하며, 라우팅 테이블로 경로를 결정합니다. 네트워크 통신, 트래픽 관리, 보안 기능을 담당합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Router_(computing)",
    "wordCategory": [
      "Network"
    ]
  },
  {
    "word_name_kr": "라우팅 테이블",
    "word_name_en": "routing table",
    "word_def": "라우팅 테이블은 네트워크 라우터에서 데이터 패킷이 목적지까지 도달하기 위해 따라야 하는 경로를 결정하는 데 사용되는 데이터베이스입니다. 이 테이블은 목적지 네트워크 주소, 다음 홉 주소, 사용할 인터페이스, 경로의 메트릭 값 등 다양한 정보를 포함하며, 라우터는 이 정보를 기반으로 패킷을 최적의 경로로 전달합니다. 라우팅 테이블은 정적 라우팅 방식에서 수동으로 설정되거나, 동적 라우팅 프로토콜을 통해 자동으로 업데이트될 수 있습니다. 네트워크의 효율성과 성능을 최적화하기 위해 라우팅 테이블의 관리와 업데이트는 매우 중요한 과정입니다.",
    "word_summ": "라우팅 테이블은 라우터의 데이터 패킷 전달 경로 결정에 쓰이며, 목적지, 다음 홉, 인터페이스, 메트릭 정보 포함합니다. 정적/동적 업데이트를 지원해 네트워크 성능을 최적화합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Routing_table",
    "wordCategory": [
      "Network"
    ]
  },
  {
    "word_name_kr": "런타임",
    "word_name_en": "run time",
    "word_def": "런타임, 실행 시간 또는 실행 시간은 컴퓨터 프로그램 수명 주기의 마지막 단계로, 코드가 컴퓨터의 중앙 처리 장치(CPU)에서 기계어 코드 형태로 실행되는 단계입니다. 즉, \"런타임\"은 프로그램의 실행 단계입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Run_time_(program_lifecycle_phase)",
    "wordCategory": [
      "Execution"
    ]
  },
  {
    "word_name_kr": "선택 정렬",
    "word_name_en": "selection sort",
    "word_def": "제자리 비교 정렬 알고리즘입니다. 시간 복잡도가 O(n2)이므로 큰 목록에서는 비효율적이며, 일반적으로 유사한 삽입 정렬보다 성능이 떨어집니다. 선택 정렬은 단순성으로 유명하며 특정 상황, 특히 보조 메모리가 제한된 경우 더 복잡한 알고리즘보다 성능 면에서 이점이 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Selection_sort",
    "wordCategory": [
      "SortingAlgorithm"
    ]
  },
  {
    "word_name_kr": "의미론",
    "word_name_en": "semantics",
    "word_def": "프로그래밍 언어 이론에서 의미론은 프로그래밍 언어의 의미에 대한 엄격한 수학적 연구와 관련된 분야입니다. 이는 특정 프로그래밍 언어에 의해 정의된 구문적으로 유효한 문자열의 의미를 평가하고 관련된 계산을 보여줌으로써 수행됩니다. 구문적으로 유효하지 않은 문자열을 평가하는 경우 결과는 계산되지 않습니다. 의미론은 컴퓨터가 특정 언어로 프로그램을 실행할 때 따르는 프로세스를 설명합니다. 이는 프로그램의 입력과 출력 간의 관계를 설명하거나 특정 플랫폼에서 프로그램이 어떻게 실행되는지에 대한 설명으로 보여줄 수 있으며, 이를 통해 계산 모델을 만들 수 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Semantics_(computer_science)",
    "wordCategory": [
      "ProgrammingLanguage"
    ]
  },
  {
    "word_name_kr": "시퀀스",
    "word_name_en": "sequence",
    "word_def": "수학에서 수열은 반복이 허용되고 순서가 중요한 객체의 열거된 모음입니다.  집합과 마찬가지로 원소 또는 용어라고도 하는 구성원을 포함합니다.  요소의 수(무한대일 수도 있음)를 수열의 길이라고 합니다.  집합과 달리 수열에서는 동일한 원소가 여러 위치에 여러 번 나타날 수 있으며 순서가 중요합니다.  공식적으로 수열은 자연수 집합(무한 수열의 경우) 또는 처음 n개의 자연수 집합(길이가 유한한 수열의 경우)을 영역으로 하는 함수로 정의할 수 있습니다.\n수열에서 원소의 위치는 순위 또는 색인이며, 원소가 이미지가 되는 자연수입니다. 첫 번째 요소는 문맥이나 특정 규칙에 따라 색인 0 또는 1을 갖습니다.  수열을 나타내는 데 기호를 사용하는 경우, 수열의 n번째 요소는 이 기호에 n을 첨자로 붙여 표시합니다. 예를 들어 피보나치 수열 F의 n번째 요소는 일반적으로 Fn으로 표시됩니다.\n예를 들어, (M, A, R, Y)는 문자 'M'이 처음에 오고 'Y'가 마지막에 오는 문자 수열입니다.  이 시퀀스는 (A, R, M, Y)와 다릅니다.  또한 두 개의 다른 위치에 숫자 1이 포함된 수열(1, 1, 2, 3, 5, 8)도 유효한 수열입니다.  수열은 이 예에서처럼 유한할 수도 있고, 모든 짝수 양의 정수(2, 4, 6, ...)의 수열과 같이 무한할 수도 있습니다.  컴퓨팅 및 컴퓨터 과학에서 유한 수열은 문자열, 단어 또는 목록이라고도 하며, 일반적으로 컴퓨터 메모리에서 이를 표현하는 다양한 방식에 따라 다른 이름으로 불리며, 무한 수열은 스트림이라고 합니다.  빈 시퀀스( )는 대부분의 시퀀스 개념에 포함되지만 문맥에 따라 제외될 수 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Sequence",
    "wordCategory": [
      "DataStructure"
    ]
  },
  {
    "word_name_kr": "직렬화 가능성",
    "word_name_en": "serializability",
    "word_def": "직렬화 가능성(Serializability)은 데이터베이스 시스템에서 병행성 제어를 위한 중요한 개념으로, 여러 트랜잭션이 동시에 실행될 때 결과의 일관성을 유지하는 능력을 말합니다. 직렬화 가능한 스케줄은 여러 트랜잭션이 마치 순차적으로 실행된 것처럼 결과를 생성하며, 이는 데이터의 일관성과 무결성을 보장합니다. 병행 실행 시에도 각 트랜잭션이 서로 간섭하지 않고, 모든 트랜잭션 실행 후의 데이터베이스 상태가 마치 트랜잭션이 순서대로 실행된 것과 같아야 합니다. 이를 통해 동시성을 높이면서도 데이터의 정확성을 보장할 수 있으며, 복잡한 시스템에서 데이터 일관성을 관리하는 데 필수적입니다.",
    "word_summ": "직렬화 가능성은 데이터베이스 동시 트랜잭션에서 데이터 일관성을 유지하는 능력, 순차적 실행과 동일한 결과 보장으로 무결성 확보에 중요합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Serializability",
    "wordCategory": [
      "Database"
    ]
  },
  {
    "word_name_kr": "직렬화",
    "word_name_en": "serialization",
    "word_def": "데이터 구조 또는 객체 상태를 저장(예: 파일 또는 메모리 버퍼)하거나 전송(예: 네트워크 연결 링크를 통해)하고 나중에 (다른 컴퓨터 환경에서) 재구성할 수 있는 형식으로 변환하는 프로세스입니다. 결과물인 일련의 비트를 직렬화 형식에 따라 다시 읽으면 의미상 동일한 원본 객체의 복제본을 만드는 데 사용할 수 있습니다. 참조를 광범위하게 사용하는 객체와 같이 복잡한 객체의 경우 이 프로세스가 간단하지 않습니다. 객체 지향 객체의 직렬화에는 이전에 연결되었던 관련 메서드가 포함되지 않습니다.\n객체를 직렬화하는 이 프로세스를 상황에 따라 객체 마샬링이라고도 합니다. 일련의 바이트에서 데이터 구조를 추출하는 반대 작업은 역직렬화(직렬화 해제 또는 마샬링 해제라고도 함)입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Serialization",
    "wordCategory": [
      "Serialization"
    ]
  },
  {
    "word_name_kr": "집합",
    "word_name_en": "set",
    "word_def": "특정 순서 없이 고유한 값을 저장할 수 있는 추상 데이터 유형입니다. 유한 집합의 수학적 개념을 컴퓨터로 구현한 것입니다. 대부분의 다른 컬렉션 유형과 달리 집합에서 특정 요소를 검색하는 대신 일반적으로 집합의 멤버십에 대한 값을 테스트합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Set_(abstract_data_type)",
    "wordCategory": [
      "DataStructure"
    ]
  },
  {
    "word_name_kr": "싱글톤 변수",
    "word_name_en": "singleton variable",
    "word_def": "한 번만 참조되는 변수. 함수 호출에서 더미 인수로 사용되거나 주소가 할당된 저장소에 액세스하는 다른 변수에 할당될 때 사용될 수 있습니다. 싱글톤 변수는 변수에 값을 할당했다가 나중에 사용하는 것을 잊어버리거나 변수 이름의 한 인스턴스를 잘못 입력하는 등 실수로 인해 발생하는 경우도 있습니다. 일부 컴파일러와 린트 유사 도구는 싱글톤 변수가 발생하면 플래그를 지정합니다.",
    "word_link": "",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "소프트웨어 설계",
    "word_name_en": "software design",
    "word_def": "에이전트가 일련의 기본 구성 요소를 사용하고 제약 조건에 따라 목표를 달성하기 위한 소프트웨어 아티팩트의 사양을 생성하는 프로세스입니다. 소프트웨어 설계는 \"복잡한 시스템을 개념화, 프레임워크, 구현, 시운전 및 궁극적으로 수정하는 데 관련된 모든 활동\" 또는 \"요구 사항 사양을 따르고 프로그래밍하기 전의 활동으로서 ... [양식화된 소프트웨어 엔지니어링 프로세스\"를 의미합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Software_design",
    "wordCategory": [
      "Design"
    ]
  },
  {
    "word_name_kr": "소프트웨어 공학",
    "word_name_en": "software engineering",
    "word_def": "소프트웨어 개발에 공학적 접근법을 체계적으로 적용하는 것을 말합니다. 소프트웨어 공학은 컴퓨팅 분야입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Software_engineering",
    "wordCategory": [
      "Engineering"
    ]
  },
  {
    "word_name_kr": "소프트웨어 프로토타이핑",
    "word_name_en": "software prototyping",
    "word_def": "소프트웨어 애플리케이션의 프로토타입, 즉 개발 중인 소프트웨어 프로그램의 불완전한 버전을 만드는 활동입니다. 소프트웨어 개발에서 발생할 수 있는 활동으로, 기계 공학이나 제조업 등 다른 분야에서 알려진 프로토타이핑과 유사합니다.  프로토타입은 일반적으로 최종 제품의 몇 가지 측면만 시뮬레이션하며 최종 제품과 완전히 다를 수 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Software_prototyping",
    "wordCategory": [
      "Prototyping"
    ]
  },
  {
    "word_name_kr": "소프트웨어 테스트",
    "word_name_en": "software testing",
    "word_def": "이해 관계자에게 테스트 중인 소프트웨어 제품 또는 서비스의 품질에 대한 정보를 제공하기 위해 실시하는 조사. 소프트웨어 테스트는 또한 소프트웨어에 대한 객관적이고 독립적인 시각을 제공하여 기업이 소프트웨어 구현의 위험을 인식하고 이해할 수 있도록 합니다. 테스트 기술에는 소프트웨어 버그(오류 또는 기타 결함)를 발견하고 소프트웨어 제품이 사용하기에 적합한지 확인하기 위해 프로그램 또는 애플리케이션을 실행하는 프로세스가 포함됩니다.",
    "word_link": "https://en.wikipedia.org/wiki/Software_testing",
    "wordCategory": [
      "Testing"
    ]
  },
  {
    "word_name_kr": "정렬 알고리즘",
    "word_name_en": "sorting algorithm",
    "word_def": "목록의 요소를 일정한 순서로 배열하는 알고리즘입니다. 가장 자주 사용되는 순서는 숫자 순서와 사전순입니다. 효율적인 정렬은 입력 데이터가 정렬된 목록에 있어야 하는 다른 알고리즘(예: 검색 및 병합 알고리즘)의 효율성을 최적화하는 데 중요합니다. 정렬은 데이터를 표준화하고 사람이 읽을 수 있는 출력을 생성하는 데에도 종종 유용합니다. 좀 더 공식적으로 말하자면, 모든 정렬 알고리즘의 출력은 두 가지 조건을 충족해야 합니다:\n * 출력은 비내림차순(원하는 총 순서에 따라 각 요소가 이전 요소보다 작지 않음)이어야 합니다;\n * 출력은 입력의 순열(순서를 바꾸지만 원래 요소는 모두 유지)입니다.\n또한, 입력 데이터는 순차적 액세스만 가능한 리스트가 아닌 무작위 액세스가 가능한 배열에 저장되는 경우가 많지만, 적절한 수정을 거쳐 두 가지 유형의 데이터에 모두 많은 알고리즘을 적용할 수 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Sorting_algorithm",
    "wordCategory": [
      "SortingAlgorithm"
    ]
  },
  {
    "word_name_kr": "소스 코드",
    "word_name_en": "source code",
    "word_def": "컴퓨팅에서 소스 코드는 사람이 읽을 수 있는 프로그래밍 언어를 사용하여 작성된 주석이 있든 없든, 보통 일반 텍스트로 작성된 코드 모음입니다. 프로그램의 소스 코드는 주로 소스 코드를 작성하여 컴퓨터가 수행할 작업을 지정하는 컴퓨터 프로그래머의 작업을 용이하게 하기 위해 특별히 고안되었습니다. 소스 코드는 어셈블러나 컴파일러에 의해 컴퓨터에서 실행할 수 있는 바이너리 기계어 코드로 변환되는 경우가 많습니다. 그런 다음 머신 코드는 나중에 실행하기 위해 저장될 수 있습니다. 또는 소스 코드를 해석하여 즉시 실행할 수도 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Source_code",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "스택",
    "word_name_en": "stack",
    "word_def": "요소의 컬렉션 역할을 하는 추상 데이터 유형으로, 두 가지 주요 연산이 있습니다:\n 컬렉션에 요소를 추가하는 * push, 그리고\n 가장 최근에 추가된 요소 중 아직 제거되지 않은 요소를 제거하는 * pop입니다.\n요소가 스택에서 빠져나오는 순서에 따라 다른 이름인 LIFO(라스트 인, 퍼스트 아웃)가 생깁니다. 또한 peek 작업을 통해 스택을 수정하지 않고도 맨 위에 액세스할 수 있습니다. 이러한 유형의 구조에 '스택'이라는 이름을 붙인 것은 실제 물건을 쌓아 놓은 것에 비유한 데서 유래했습니다. 이 구조에서는 스택 맨 위에 있는 항목을 쉽게 꺼낼 수 있는 반면, 스택의 더 깊은 곳에 있는 항목을 꺼내려면 다른 여러 항목을 먼저 꺼내야 할 수 있습니다.",
    "word_summ": "스택은 LIFO(마지막 들어온 첫번째 나가는) 원칙을 따르는 추상 데이터 유형입니다. 주 연산은 push(추가), pop(제거), peek(맨 위 요소 확인)입니다. 스택은 요소를 순서대로 관리합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)",
    "wordCategory": [
      "DataStructure"
    ]
  },
  {
    "word_name_kr": "상태",
    "word_name_en": "state",
    "word_def": "정보 기술 및 컴퓨터 과학에서는 시스템이 이전 이벤트 또는 사용자 상호 작용을 기억하도록 설계된 경우 시스템을 상태 저장소라고 하며, 기억된 정보를 시스템 상태라고 합니다.",
    "word_summ": "정보 기술 및 컴퓨터 과학에서는 시스템이 이전 이벤트 또는 사용자 상호 작용을 기억하도록 설계된 경우 시스템을 상태 저장소라고 하며, 기억된 정보를 시스템 상태라고 합니다.",
    "word_link": "https://en.wikipedia.org/wiki/State_(computer_science)",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "명령문",
    "word_name_en": "statement",
    "word_def": "컴퓨터 프로그래밍에서 명령문은 수행해야 할 작업을 표현하는 명령형 프로그래밍 언어의 구문 단위입니다. 이러한 언어로 작성된 프로그램은 하나 이상의 명령문 시퀀스로 구성됩니다. 문은 내부 구성 요소(예: 표현식)를 가질 수 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Statement_(computer_science)",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "스트림",
    "word_name_en": "stream",
    "word_def": "시간이 지남에 따라 제공되는 데이터 요소의 시퀀스입니다. 스트림은 컨베이어 벨트 위의 품목이 한꺼번에 처리되는 것이 아니라 한 번에 하나씩 처리되는 것으로 생각할 수 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Stream_(computing)",
    "wordCategory": [
      "DataProcessing"
    ]
  },
  {
    "word_name_kr": "문자열",
    "word_name_en": "string",
    "word_def": "컴퓨터 프로그래밍에서 문자열은 전통적으로 리터럴 상수 또는 일종의 변수로 사용되는 문자 시퀀스입니다. 후자는 그 요소를 변경하고 길이를 변경할 수 있거나 (생성 후) 고정될 수 있습니다. 문자열은 일반적으로 데이터 유형으로 간주되며, 특정 문자 인코딩을 사용하여 일련의 요소(일반적으로 문자)를 저장하는 바이트(또는 단어)의 배열 데이터 구조로 구현되는 경우가 많습니다. 문자열은 보다 일반적인 배열 또는 기타 시퀀스(또는 리스트) 데이터 유형 및 구조를 나타낼 수도 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/String_(computer_science)",
    "wordCategory": [
      "DataType"
    ]
  },
  {
    "word_name_kr": "구문",
    "word_name_en": "syntax",
    "word_def": "컴퓨터 언어의 구문은 해당 언어에서 올바르게 구조화된 문장이나 표현으로 간주되는 기호의 조합을 정의하는 규칙 집합입니다. 이는 문서가 소스 코드를 나타내는 프로그래밍 언어와 문서가 데이터를 나타내는 마크업 언어에 모두 적용됩니다.",
    "word_link": "https://en.wikipedia.org/wiki/Syntax_(programming_languages)",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "구문 오류",
    "word_name_en": "syntax error",
    "word_def": "컴파일 타임에 작성된 문자 또는 토큰 시퀀스의 구문 오류입니다. 모든 구문 오류가 수정될 때까지 프로그램은 컴파일되지 않습니다. 그러나 통역 언어의 경우 프로그램 실행 중에 구문 오류가 감지될 수 있으며, 통역사의 오류 메시지가 구문 오류와 다른 종류의 오류를 구분하지 못할 수도 있습니다. 어떤 오류가 '구문 오류'인지에 대해서는 의견이 분분합니다. 예를 들어, 어떤 사람들은 Java 코드에서 초기화되지 않은 변수 값을 사용하는 것이 구문 오류라고 말하지만, 다른 많은 사람들은 이에 동의하지 않고 이를 (정적) 의미론적 오류로 분류할 것입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Syntax_error",
    "wordCategory": [
      "Error"
    ]
  },
  {
    "word_name_kr": "트리",
    "word_name_en": "tree",
    "word_def": "루트 값과 부모 노드를 가진 자식들의 하위 트리가 연결된 노드 집합으로 표현되는 계층적 트리 구조를 시뮬레이션하는 널리 사용되는 추상 데이터 유형(ADT)입니다.",
    "word_link": "https://en.wikipedia.org/wiki/Tree_(data_structure)",
    "wordCategory": [
      "DataStructure"
    ]
  },
  {
    "word_name_kr": "유저",
    "word_name_en": "user",
    "word_def": "컴퓨터 또는 네트워크 서비스를 사용하는 사람입니다. 컴퓨터 시스템 및 소프트웨어 제품의 사용자는 일반적으로 작동 방식을 완전히 이해하는 데 필요한 기술적 전문 지식이 부족합니다. 고급 사용자는 프로그램의 고급 기능을 사용하지만 컴퓨터 프로그래밍 및 시스템 관리 능력이 반드시 필요한 것은 아닙니다.",
    "word_link": "https://en.wikipedia.org/wiki/User_(computing)",
    "wordCategory": [
      "HumanInteraction"
    ]
  },
  {
    "word_name_kr": "변수",
    "word_name_en": "variable",
    "word_def": "프로그래밍 언어에서 변수는 데이터를 저장하는 메모리 공간을 참조하는 이름입니다. 변수를 사용하면 프로그램 내에서 데이터 값을 저장, 수정, 검색할 수 있으며, 이는 프로그램의 동적인 실행을 가능하게 합니다. 변수에는 다양한 타입이 있으며, 이는 저장할 수 있는 데이터의 종류와 크기를 결정합니다. 예를 들어, 정수형 변수는 정수를, 문자열 변수는 텍스트를 저장할 수 있습니다. 프로그래밍 언어마다 변수를 선언하고 사용하는 구체적인 문법이 다를 수 있지만, 변수의 기본적인 개념과 역할은 대체로 일관됩니다. 변수의 사용은 프로그래밍에서 중요한 개념 중 하나로, 코드의 가독성과 재사용성을 높이는 데 기여합니다.",
    "word_summ": "프로그래밍에서 변수는 데이터 저장을 위한 메모리 공간 참조로, 다양한 타입으로 데이터 종류와 크기를 정합니다. 이는 동적 실행과 코드의 가독성, 재사용성 향상에 기여합니다.",
    "word_link": "https://en.wikipedia.org/wiki/Variable_(computer_science)",
    "wordCategory": [
      "Programming"
    ]
  },
  {
    "word_name_kr": "폭포 모델",
    "word_name_en": "waterfall model",
    "word_def": "프로젝트 활동을 선형적인 순차적 단계로 분류하고, 각 단계는 이전 단계의 결과물에 따라 달라지며 작업의 전문화에 해당합니다.  이 접근 방식은 엔지니어링 설계의 특정 영역에서 일반적입니다. 소프트웨어 개발에서는 개념, 시작, 분석, 설계, 구축, 테스트, 배포 및 유지보수 단계를 통해 주로 한 방향(폭포수처럼 \"아래쪽으로\")으로 진행되기 때문에 덜 반복적이고 유연한 접근 방식에 속하는 경향이 있습니다.",
    "word_link": "https://en.wikipedia.org/wiki/Waterfall_model",
    "wordCategory": [
      "SoftwareDevelopment"
    ]
  }
]